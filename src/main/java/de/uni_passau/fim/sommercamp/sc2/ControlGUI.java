package de.uni_passau.fim.sommercamp.sc2;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER;

public class ControlGUI {
    private JPanel basePanel;
    private JButton singlePlayerButton;
    private JButton multiPlayerButton;
    private JComboBox<String> mapSelector;
    private JPanel botAPanel;
    private JScrollPane botAScroll;
    private JSlider fps;
    private JPanel botBPanel;
    private JScrollPane botBScroll;

    private List<JToggleButton> botASelector = new ArrayList<>();
    private List<JToggleButton> botBSelector = new ArrayList<>();

    private ControlGUI(List<String> bots, List<String> maps) {

        JFrame frame = new JFrame("SC2-Bots Starter");
        $$$setupUI$$$();
        frame.setContentPane(basePanel);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        for (int i = 0; i < bots.size(); i++) {
            String bot = bots.get(i);
            JToggleButton button = new JToggleButton(bot);
            botASelector.add(button);
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = i;
            gbc.fill = 1;
            botAPanel.add(button, gbc);
        }

        for (int i = 0; i < bots.size(); i++) {
            String bot = bots.get(i);
            JToggleButton button = new JToggleButton(bot);
            botBSelector.add(button);
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = i;
            gbc.fill = 1;
            botBPanel.add(button, gbc);
        }

        frame.pack();
        int botsWidth = botAPanel.getWidth();
        int botsHeight = botAPanel.getHeight();
        botAPanel.setPreferredSize(new Dimension(botsWidth, botsHeight));
        botBPanel.setPreferredSize(new Dimension(botsWidth, botsHeight));
        botAScroll.setViewportView(botAPanel);
        botBScroll.setViewportView(botBPanel);
        botAScroll.setHorizontalScrollBarPolicy(HORIZONTAL_SCROLLBAR_NEVER);
        botBScroll.setHorizontalScrollBarPolicy(HORIZONTAL_SCROLLBAR_NEVER);
        int sbWidth = (int) botAScroll.getVerticalScrollBar().getPreferredSize().getWidth();
        botAScroll.setPreferredSize(new Dimension(botsWidth + sbWidth + 3, Math.min(300, botsHeight + 3)));
        botBScroll.setPreferredSize(new Dimension(botsWidth + sbWidth + 3, Math.min(300, botsHeight + 3)));

        maps.sort(Comparator.naturalOrder());
        maps.forEach(mapSelector::addItem);

        singlePlayerButton.addActionListener(e -> new Thread(() ->
                botASelector.stream().filter(JToggleButton::isSelected).map(JToggleButton::getText).findFirst().ifPresent(b -> {
                    BaseBot.FRAME_RATE = fps.getValue();
                    SinglePlayerMain.run((String) mapSelector.getSelectedItem(), b);
                })).start());

        multiPlayerButton.addActionListener(e -> new Thread(() ->
                botASelector.stream().filter(JToggleButton::isSelected).map(JToggleButton::getText).findFirst().ifPresent(botA ->
                        botBSelector.stream().filter(JToggleButton::isSelected).map(JToggleButton::getText).findFirst().ifPresent(botB -> {
                            BaseBot.FRAME_RATE = fps.getValue();
                            MultiPlayerMain.run((String) mapSelector.getSelectedItem(), Arrays.asList(botA, botB));
                        }))).start());

        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        new ControlGUI(ReflectionUtil.getBotList(), ReflectionUtil.getMaps());
    }

    private void createUIComponents() {
        botAPanel = new JPanel(new GridBagLayout());
        botBPanel = new JPanel(new GridBagLayout());
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        basePanel = new JPanel();
        basePanel.setLayout(new GridLayoutManager(3, 3, new Insets(5, 5, 5, 5), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        basePanel.add(panel1, new GridConstraints(0, 2, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mapSelector = new JComboBox();
        panel1.add(mapSelector, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        fps = new JSlider();
        fps.setMajorTickSpacing(10);
        fps.setMaximum(30);
        fps.setMinorTickSpacing(1);
        fps.setPaintLabels(true);
        fps.setPaintTicks(true);
        fps.setSnapToTicks(true);
        fps.setValue(20);
        panel1.add(fps, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final JLabel label1 = new JLabel();
        label1.setText("FPS");
        panel1.add(label1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        multiPlayerButton = new JButton();
        multiPlayerButton.setText("MultiPlayer");
        panel1.add(multiPlayerButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        singlePlayerButton = new JButton();
        singlePlayerButton.setText("SinglePlayer");
        panel1.add(singlePlayerButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Mode");
        panel1.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Map");
        panel1.add(label3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        botAScroll = new JScrollPane();
        basePanel.add(botAScroll, new GridConstraints(1, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        botAScroll.setViewportView(botAPanel);
        botBScroll = new JScrollPane();
        basePanel.add(botBScroll, new GridConstraints(1, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        botBScroll.setViewportView(botBPanel);
        final JLabel label4 = new JLabel();
        label4.setText("Single Player / Bot 1");
        basePanel.add(label4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Bot 2");
        basePanel.add(label5, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return basePanel;
    }
}
